const { expectRevert, expectEvent, constants, BN } = require('@openzeppelin/test-helpers');
const { expect } = require('chai');
const EthCrossChainManager = artifacts.require('./../../contracts/core/.0/CrossChainManager/logic/EthCrossChainManager');
const EthCrossChainData = artifacts.require('./../../contracts/core/.0/CrossChainManager/data/EthCrossChainData');
const EthCrossChainManagerProxy = artifacts.require('./../../contracts/core/.0/CrossChainManager/upgrade/EthCrossChainManagerProxy');
const NewEthCrossChainManager = artifacts.require('./../../contracts/core/.0/CrossChainManager/logic/NewEthCrossChainManager');
contract('EthCrossChain .0', (accounts) => {

    before(async function () {
        this.ECCD = await EthCrossChainData.new({ from: accounts[0], value: web3.utils.toWei('0', 'ether'), gas: 10000000, gasPrice: 50 });
        console.log("this.ECCD.address = ", this.ECCD.address);
        this.ECCM = await EthCrossChainManager.new(this.ECCD.address, { from: accounts[0], value: web3.utils.toWei('0', 'ether'), gas: 200000000, gasPrice: 50 });
        console.log("this.ECCM.address........... = ", this.ECCM.address);
        this.ECCMP = await EthCrossChainManagerProxy.new(this.ECCM.address, { from: accounts[0], value: web3.utils.toWei('0', 'ether'), gas: 60000000, gasPrice: 50 });
        console.log("this.ECCMP.address........... = ", this.ECCMP.address);
        this.ECCM1 = await NewEthCrossChainManager.new(this.ECCD.address, { from: accounts[0], value: web3.utils.toWei('0', 'ether'), gas: 200000000, gasPrice: 50 });
        console.log("this.ECCM1.address........... = ", this.ECCM1.address);
    });

    describe('transferOwnership', function () {
        it('this.ECCD.transferOwnership(this.ECCM.address) correctly', async function () {
            let owner = await this.ECCD.owner.call();
            assert.equal(owner, accounts[0]);

            const {logs} = await this.ECCD.transferOwnership(this.ECCM.address);
            expectEvent.inLogs(logs, 'OwnershipTransferred', {
                previousOwner:accounts[0],
                newOwner:this.ECCM.address,
            });
            owner = await this.ECCD.owner.call();
            assert.equal(owner, this.ECCM.address);
        });
        it('this.ECCM.transferOwnership(this.ECCMP.address) correctly', async function () {
            let owner = await this.ECCM.owner.call();
            assert.equal(owner, accounts[0]);
            const {logs} = await this.ECCM.transferOwnership(this.ECCMP.address, { from: accounts[0] });
            expectEvent.inLogs(logs, 'OwnershipTransferred', {
                previousOwner:accounts[0],
                newOwner:this.ECCMP.address,
            });
            owner = await this.ECCM.owner.call();
            assert.equal(owner, this.ECCMP.address);
        });
        it('this.ECCMP.getEthCrossChainManager() correctly', async function () {
            let eccm = await this.ECCMP.getEthCrossChainManager();
            assert.equal(eccm, this.ECCM.address);
        });

    });

    describe('initGenesisBlock', function () {

        const genesisHeader = '0x000000009b9156170000000000000000000000000000000000000000000000000000000000000000000000006de0a8f7ee3fb67d8e04ac9547f3615e59adc6e0a2309c90080a272dc1fa1fd90000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c8365b000000001dac2b7c00000000fd1a057b226c6561646572223a343239343936373239352c227672665f76616c7565223a22484a675171706769355248566745716354626e6443456c384d516837446172364e4e646f6f79553051666f67555634764d50675851524171384d6f38373853426a2b38577262676c2b36714d7258686b667a72375751343d222c227672665f70726f6f66223a22785864422b5451454c4c6a59734965305378596474572f442f39542f746e5854624e436667354e62364650596370382f55706a524c572f536a5558643552576b75646632646f4c5267727052474b76305566385a69413d3d222c226c6173745f636f6e6669675f626c6f636b5f6e756d223a343239343936373239352c226e65775f636861696e5f636f6e666967223a7b2276657273696f6e223a312c2276696577223a312c226e223a372c2263223a322c22626c6f636b5f6d73675f64656c6179223a31303030303030303030302c22686173685f6d73675f64656c6179223a31303030303030303030302c22706565725f68616e647368616b655f74696d656f7574223a31303030303030303030302c227065657273223a5b7b22696e646578223a312c226964223a2231323035303238313732393138353430623262353132656165313837326132613265336132386439383963363064393564616238383239616461376437646437303664363538227d2c7b22696e646578223a322c226964223a2231323035303338623861663632313065636664636263616232323535326566386438636634316336663836663963663961623533643836353734316366646238333366303662227d2c7b22696e646578223a332c226964223a2231323035303234383261636236353634623139623930363533663665396338303632393265386161383366373865376139333832613234613665666534316330633036663339227d2c7b22696e646578223a342c226964223a2231323035303236373939333061343261616633633639373938636138613366313265313334633031393430353831386437383364313137343865303339646538353135393838227d2c7b22696e646578223a352c226964223a2231323035303234363864643138393965643264316363326238323938383261313635613065636236613734356166306337326562323938326436366234333131623465663733227d2c7b22696e646578223a362c226964223a2231323035303265623162616162363032633538393932383235363163646161613761616262636464306363666362633365373937393361633234616366393037373866333561227d2c7b22696e646578223a372c226964223a2231323035303331653037373966356335636362323631323335326665346132303066393964336537373538653730626135336636303763353966663232613330663637386666227d5d2c22706f735f7461626c65223a5b362c342c332c352c362c312c322c352c342c372c342c322c332c332c372c362c352c342c362c352c312c342c332c312c322c352c322c322c362c312c342c352c342c372c322c332c342c312c352c372c342c312c322c322c352c362c342c342c322c372c332c362c362c352c312c372c332c312c362c312c332c332c322c342c342c312c352c362c352c312c322c362c372c352c362c332c342c372c372c332c322c372c312c352c362c352c322c332c362c322c362c312c372c372c372c312c372c342c332c332c332c322c312c372c355d2c226d61785f626c6f636b5f6368616e67655f76696577223a36303030307d7d9fe171f3fe643eb1c188400b828ba184816fc9ac0000'
        const genesisPubKey = '0x1205041e0779f5c5ccb2612352fe4a200f99d3e7758e70ba53f607c59ff22a30f678ff757519efff911efc7ed326890a2752b9456cc0054f9b63215f1d616e574d6197120504468dd1899ed2d1cc2b829882a165a0ecb6a745af0c72eb2982d66b4311b4ef73cff28a6492b076445337d8037c6c7be4d3ec9c4dbe8d7dc65d458181de7b5250120504482acb6564b19b90653f6e9c806292e8aa83f78e7a9382a24a6efe41c0c06f39ef0a95ee60ad9213eb0be343b703dd32b12db32f098350cf3f4fc3bad6db23ce120504679930a42aaf3c69798ca8a3f12e134c019405818d783d11748e039de8515988754f348293c65055f0f1a9a5e895e4e7269739e243a661fff801941352c387121205048172918540b2b512eae1872a2a2e3a28d989c60d95dab8829ada7d7dd706d658df044eb93bbe698eff62156fc14d6d07b7aebfbc1a98ec4180b4346e67cc3fb01205048b8af6210ecfdcbcab22552ef8d8cf41c6f86f9cf9ab53d865741cfdb833f06b72fcc7e7d8b9e738b565edf42d8769fd161178432eadb2e446dd0a8785ba088f120504eb1baab602c5899282561cdaaa7aabbcdd0ccfcbc3e79793ac24acf90778f35a059fca7f73aeb60666178db8f704b58452b7a0b86219402c0770fcb52ac9828c'
        const genesisHeaderWithWrongBookKeeper = "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c033644e70a2b4f8de4a15c4a0cd79315673b8346d033804807058f3ff4252900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c8365b000000001dac2b7c00000000fd1a057b226c6561646572223a343239343936373239352c227672665f76616c7565223a22484a675171706769355248566745716354626e6443456c384d516837446172364e4e646f6f79553051666f67555634764d50675851524171384d6f38373853426a2b38577262676c2b36714d7258686b667a72375751343d222c227672665f70726f6f66223a22785864422b5451454c4c6a59734965305378596474572f442f39542f746e5854624e436667354e62364650596370382f55706a524c572f536a5558643552576b75646632646f4c5267727052474b76305566385a69413d3d222c226c6173745f636f6e6669675f626c6f636b5f6e756d223a343239343936373239352c226e65775f636861696e5f636f6e666967223a7b2276657273696f6e223a312c2276696577223a312c226e223a372c2263223a322c22626c6f636b5f6d73675f64656c6179223a31303030303030303030302c22686173685f6d73675f64656c6179223a31303030303030303030302c22706565725f68616e647368616b655f74696d656f7574223a31303030303030303030302c227065657273223a5b7b22696e646578223a312c226964223a2231323035303364313031383338383037656334303739613436666539386436626439613036393061626362643863653136653066626334353230633763376566373838356462227d2c7b22696e646578223a322c226964223a2231323035303361366231623065316336393737663434663336323332613566336236316236613835396234636535313437633439616363666139613432663438336631323034227d2c7b22696e646578223a332c226964223a2231323035303266663764666337303562623561633638643265383932333063363632393939616562313832383431333165396663653934656639666166356239393137353364227d2c7b22696e646578223a342c226964223a2231323035303334343031376363636138323064393066306562623436316466343633333762303932336230616532626365353833636565316132363234633932303865323038227d2c7b22696e646578223a352c226964223a2231323035303331326631303233393531333134336330323938346263346561396438353438383366636466343937333264633732376466613734373438326663383037653634227d2c7b22696e646578223a362c226964223a2231323035303333336334343833376464623934616435666130656234363062306634393135346639303530333631396434643263386565303833333066623831353834316432227d2c7b22696e646578223a372c226964223a2231323035303363366536383165353135346566626136346337356230616131636135343438396261653736353330373764313664646439373236663336356265333036323264227d5d2c22706f735f7461626c65223a5b362c352c342c332c372c322c372c372c352c352c322c322c322c322c362c352c322c342c312c332c342c312c342c332c332c322c342c352c372c312c342c332c342c352c332c352c352c342c322c312c342c332c312c352c352c352c322c362c342c332c312c362c322c322c312c332c332c322c332c372c372c362c342c342c362c372c372c362c322c362c372c372c312c332c342c312c352c362c322c372c342c342c362c352c312c332c352c372c352c332c312c362c312c322c362c362c312c372c362c362c372c332c372c312c315d2c226d61785f626c6f636b5f6368616e67655f76696577223a31303030307d7da969bae1168780e35a40c4d1af2dede531fd6fb8";
        it('initGenesisBlock revert since wrong bookkeeper', async function () {
            let pauseStatus = await this.ECCMP.paused();
            assert.equal(pauseStatus, false);
            await expectRevert(this.ECCM.initGenesisBlock(genesisHeaderWithWrongBookKeeper, genesisPubKey), "NextBookers illegal");
        });
        it('initGenesisBlock correctly', async function () {
            let pauseStatus = await this.ECCMP.paused();
            assert.equal(pauseStatus, false);
            const expectedCurEpochStartHeight = new web3.utils.BN('0');

            const { logs } = await this.ECCM.initGenesisBlock(genesisHeader, genesisPubKey);
            expectEvent.inLogs(logs, 'InitGenesisBlockEvent', {
                height: expectedCurEpochStartHeight,
                rawHeader: genesisHeader,
            });

            let storedCEPKB = await this.ECCD.getCurEpochConPubKeyBytes();
            console.log('stored Consensu Peers public key book keeper is: ', storedCEPKB);

            let curEpochStartHeight = await this.ECCD.getCurEpochStartHeight();
            expect(curEpochStartHeight).to.be.bignumber.equal(expectedCurEpochStartHeight);

        });

        it('InitGenesisBlock throws error on InitGenesisBlock twice', async function () {
            await expectRevert(this.ECCM.initGenesisBlock(genesisHeader, genesisPubKey), "EthCrossChainData contract has already been initialized!");
        });

    });


    describe('verifyHeaderAndExecuteTx', function () {
        const proofx = '0xd72000ca93f8738111a063d8ab7221f47c70a4cade0ca4a2829df494cd4b5e231bd60300000000000000204caa77a3d2ddfaa318c550f1f38dd09d610dcff827d1f2ccd4ddcafaa6c553cc081b0000000000000014b7041bc96b15da728fdfc1c47cbfc687b845adeb0200000000000000144ddcf539d13e92d4151b7f5e607d4a09f725c47d06756e6c6f636b4a14406d31a9291bdaed4f4bc31b97dc468f88256ded14344cfc3b8635f72f14200aaf2168d9f75df86fd353000000000000000000000000000000000000000000000000000000000000000177d99c0f0857535155071d49ded129993a5b98575761985e90e2d26c7a569a0d';
        const blockHeaderx1 = '0x000000009b91561700000000622b986e745766256e1b3bb6b478d3da265614dc3a481a1ece3c02a499cbec5c00000000000000000000000000000000000000000000000000000000000000008d8021b0dffcf4361f82ac31b6f990da35f304c1d11342b59b80bd836a8af94d9b970da4cb85cb93e406ce857353c33223b7558aad3f5c903bbd838fce0650314417185f9e43000082ad40a6f1e63ecffd0c017b226c6561646572223a322c227672665f76616c7565223a22424a4f784a3942326b4e446c48736a533359424150386b34414d4e446a716e7a4b32624c5839485576576272497a6d502f48425874783541654e626242436b48306c5734746f4a697455783947304d2b6d3350394677413d222c227672665f70726f6f66223a2258514a30514145775474586c5675594d68454f2f766e566f75776b394442416f4b686962506d3042706e6d3854436e7034334d73767455323868436f6c6c6c5075685573764b34647a7935416e34577730576d4639673d3d222c226c6173745f636f6e6669675f626c6f636b5f6e756d223a302c226e65775f636861696e5f636f6e666967223a6e756c6c7d0000000000000000000000000000000000000000'
        const headerProofx = '0x'
        const curRawHeader = '0x'
        const signaturesx1 = '0x63fd63a8448a034a594c7e34034c0455628c3e879e6981e879b6f20ad1994f3e349d5021592a10908074d5ffc3d72384ee7dbfa7ad4b41388944c22dd3276bc701b046097a68620061598e5c59367f1faab18548ece6c8d6aca1572f95eee3915623eeba8a9c06a1886a16bd019f0d294fc1b204f273a32f4fcfcec994368827f00187206061136d01eb706c1950926d2986d20c3cc879977ccecbae6f8771dfc8873e9c269122575c7493a424f8cce1144e33115ed2402af40f141caf53fef4869500dc9caa49811f4d63c22752906cbfc03bf0bc646699cd82d143c349ab871bf6580102c40a38f4b9284865534dfb2059c100ae383e7f50c35f35eb7a768d4160890146487eb3f2ade194b48fb85df5c22e9a554d551375f23568e2f19f7d0b7021cf241b72890e4b12889480316e4a96404b36b9ef25d6337d947f8a9968577af554011c58c13bc05bff169897898d9c044e93006c8181e6231c1d7ab92b5bc45dd0242a65018cc843404e1e20f6748df88c48ba9a383a51c6493b0358153f0e2d78ca01'
        const blockHeightx1 = new web3.utils.BN('16734');
        it('verifyHeaderAndExecuteTx correctly', async function () {
            const {logs} = await this.ECCM.verifyHeaderAndExecuteTx(proofx, blockHeaderx1, headerProofx, curRawHeader, signaturesx1);
            expectEvent.inLogs(logs, 'VerifyHeaderAndExecuteTxEvent', {
                fromChainID: new web3.utils.BN('3'),
                toContract: '0x4ddcf539d13e92d4151b7f5e607d4a09f725c47d',
                crossChainTxHash:'0x00ca93f8738111a063d8ab7221f47c70a4cade0ca4a2829df494cd4b5e231bd6',
                fromChainTxHash:'0x4caa77a3d2ddfaa318c550f1f38dd09d610dcff827d1f2ccd4ddcafaa6c553cc',
            });
        });

        it('verifyHeaderAndExecuteTx throws error on sync same block height header twice', async function () {
            await expectRevert(this.ECCM.verifyHeaderAndExecuteTx(proofx, blockHeaderx1, headerProofx, curRawHeader, signaturesx1), "the transaction has been executed!");
        });
    });

    // describe('changeBookKeeper', function () {
    //     const rawHeader = '0x';
    //     const pubKeyList = '0x'
    //     const sigList = '0x'
    //     const rawHeaderHeight = new web3.utils.BN('80000');
    //     it('changeBookKeeper correctly', async function () {
    //         const {logs} = await this.ECCM.changeBookKeeper(rawHeader, pubKeyList, sigList);
    //         expectEvent.inLogs(logs, 'ChangeBookKeeperEvent', {
    //             height: rawHeaderHeight,
    //             rawHeader: rawHeader,
    //         });
    //     });

    //     it('changeBookKeeper throws error on sync same block height header twice', async function () {
    //         await expectRevert(this.ECCM.changeBookKeeper(rawHeader, pubKeyList, sigList), "The height of header is lower than current epoch start height!");
    //     });
    // });

    describe('Here, we demonstrate the steps to upgrade EthCrossChainManagerContract,', async function () {
        it('first, owner of this.ECCMP invoke this.ECCMP.pauseEthCrossChainManager()', async function () {
            const {logs} = await this.ECCMP.pauseEthCrossChainManager({from:accounts[0]});
            expectEvent.inLogs(logs, 'Paused', {
                account:accounts[0],
            });
            expectEvent.inLogs(logs, 'Paused', {
                account:this.ECCMP.address,
            });
            expectEvent.inLogs(logs, 'Paused', {
                account:this.ECCM.address,
            });
            let pauseStatusECCMP = await this.ECCMP.paused();
            assert.equal(pauseStatusECCMP, true);
            let pauseStatusECCM = await this.ECCM.paused();
            assert.equal(pauseStatusECCM, true);
            let pauseStatusECCD = await this.ECCD.paused();
            assert.equal(pauseStatusECCD, true);
        });
        it('second, we deploy the new version of EthCrossChainManager contract which we have done in before with hash = this.ECCM1.address', async function () {
            console.log('new version of EthCrossChainManager contract  address we deployed previously: \n', this.ECCM1.address);
        });
        it('third, the deployer invoke this.ECCM1.transferOwnership(this.ECCMP.address)', async function () {
            let owner = await this.ECCM1.owner();
            assert.equal(owner, accounts[0]);
            const {logs} = await this.ECCM1.transferOwnership(this.ECCMP.address, { from: accounts[0] });
            expectEvent.inLogs(logs, 'OwnershipTransferred', {
                previousOwner:accounts[0],
                newOwner:this.ECCMP.address,
            });
            owner = await this.ECCM.owner();
            assert.equal(owner, this.ECCMP.address);
        });
        it('forth, the owner of this.ECCMP invoke this.ECCMP.upgradeEthCrossChainManager(this.ECCM1.address)', async function () {
            let ownerOfECCD = await this.ECCD.owner();
            let ownerOfECCM = await this.ECCM.owner();
            let ownerOfECCMP = await this.ECCMP.owner();
            assert.equal(ownerOfECCD, this.ECCM.address);
            assert.equal(ownerOfECCM, this.ECCMP.address);
            assert.equal(ownerOfECCMP, accounts[0]);
            await this.ECCMP.upgradeEthCrossChainManager(this.ECCM1.address, { from: accounts[0] });
            let newOwnerOfECCM1 = await this.ECCM1.owner();
            assert.equal(newOwnerOfECCM1, this.ECCMP.address);
        });
        it('fifth, the owner of this.ECCMP invoke this.ECCMP.unpauseEthCrossChainManager()', async function () {
            await this.ECCMP.unpauseEthCrossChainManager({ from: accounts[0] });
            const newEthCrossChainManagerAddr = await this.ECCMP.getEthCrossChainManager.call();
            assert.equal(newEthCrossChainManagerAddr, this.ECCM1.address);
            let pauseStatusECCMP = await this.ECCMP.paused();
            assert.equal(pauseStatusECCMP, false);
            let pauseStatusECCM = await this.ECCM.paused();
            assert.equal(pauseStatusECCM, true);
            let pauseStatusECCD = await this.ECCD.paused();
            assert.equal(pauseStatusECCD, false);
            let pauseStatusECCM1 = await this.ECCM1.paused();
            assert.equal(pauseStatusECCM1, false);
        });
    });

    describe('Here, we try to use old method in the old EthCrossChainManager contract, should revert due to status paused', async function () {
        const proofy = '0xd020e91d858cba58b3dff91bf4b3adcacabf899e106ed6ad86a16a4a29e7817e307c080000000000000020b697330bd7a5850235f97d1bcd1c37739f4bc79a4f8e635dcb46ba45bc600ef4012f14f71b55ef55cedc91fd007f7a9ba386ec978f3aa80200000000000000144ddcf539d13e92d4151b7f5e607d4a09f725c47d06756e6c6f636b4a14000000000000000000000000000000000000000014344cfc3b8635f72f14200aaf2168d9f75df86fd36226100000000000000000000000000000000000000000000000000000000000';
        const blockHeadery1 = '0x000000009b91561700000000285c4b50cb092422c306eee00b18730bd1e05f0c144bc04d0adf1f44e0aef6c70000000000000000000000000000000000000000000000000000000000000000829ba7727b3bb7d42eff74342bafb37362b4898169750e8b2b8af2267c863ebf6fb8849a086fbed1ccd873b63642cce60ac54875cc3c1f054c1866e0bca5136dc90a185f5e4100007de0abdc2a5b63d5fd0c017b226c6561646572223a312c227672665f76616c7565223a224249703243555764736c424c6b34754979584174417949682f74685a6b5072445539566279697358754c574d6e634a775a49515161434f4b74724474793437454d3541554e4a7542523133546b6857616e56422b4b7a493d222c227672665f70726f6f66223a224a3830534c2b6c62433537306f64426374486f477a45504631516d506f7a4f4332323132553563796b4949346a6b77374d2f74746f317537386e4634347256433443676d344f786f71667943656b3568487132576a413d3d222c226c6173745f636f6e6669675f626c6f636b5f6e756d223a302c226e65775f636861696e5f636f6e666967223a6e756c6c7d0000000000000000000000000000000000000000'
        const headerProofy = '0x'
        const curRawHeader = '0x'
        const signaturesy1 = '0x96274d33426ab59a6d83e591a58be5f1f8735ee7c5a946abf1d49a3bad15f8046a93a4ba2a3bada54de7a8021b56547a191a06cf905e7e20a840a1d34332a07f00636e2d5bab2c864353be89ef2c03b81dc5aeef2f0c3f50d65613b05220bb20e26ae9ab8c8810b6aaa6592d2337b367c4d5dce6b3c83a76935ef90022f54d640f0139829b2c3848c57f33bf1268fde4c702f21f7a7255ba3a66b80c0f2eb3f14fcb547bfcea8ff15464cd8e577a9934f78ce396a60455fb55c851a8e5e3c2322f8e0028f2cc6133c1d7c67be27ba12033ff903a445292e6229640109452125758c4982632257d0f9813bbc27edb7b436b8f9adc0e3d7fe5ed1d55c1e6bd4ac2bf34460093acf1f6a5cf90840cd2e119a09dcf551d8727414eee3de239776d6f83ccaedd2603d1c78034fb34fbe8bb9a8df3c03063e37cfcab6eebdedb705d4db0ec6f9300'
        it('in old EthCrossChainManager contract, verifyHeaderAndExecuteTx throws error on since contract status paused', async function () {
            await expectRevert(this.ECCM.verifyHeaderAndExecuteTx(proofy, blockHeadery1, headerProofy, curRawHeader, signaturesy1), "Pausable: paused");
        });
    });

    describe('Here, we try to use old method in the new EthCrossChainManager contract,', async function () {
        const genesisHeader = '0x000000009b9156170000000000000000000000000000000000000000000000000000000000000000000000006de0a8f7ee3fb67d8e04ac9547f3615e59adc6e0a2309c90080a272dc1fa1fd90000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c8365b000000001dac2b7c00000000fd1a057b226c6561646572223a343239343936373239352c227672665f76616c7565223a22484a675171706769355248566745716354626e6443456c384d516837446172364e4e646f6f79553051666f67555634764d50675851524171384d6f38373853426a2b38577262676c2b36714d7258686b667a72375751343d222c227672665f70726f6f66223a22785864422b5451454c4c6a59734965305378596474572f442f39542f746e5854624e436667354e62364650596370382f55706a524c572f536a5558643552576b75646632646f4c5267727052474b76305566385a69413d3d222c226c6173745f636f6e6669675f626c6f636b5f6e756d223a343239343936373239352c226e65775f636861696e5f636f6e666967223a7b2276657273696f6e223a312c2276696577223a312c226e223a372c2263223a322c22626c6f636b5f6d73675f64656c6179223a31303030303030303030302c22686173685f6d73675f64656c6179223a31303030303030303030302c22706565725f68616e647368616b655f74696d656f7574223a31303030303030303030302c227065657273223a5b7b22696e646578223a312c226964223a2231323035303238313732393138353430623262353132656165313837326132613265336132386439383963363064393564616238383239616461376437646437303664363538227d2c7b22696e646578223a322c226964223a2231323035303338623861663632313065636664636263616232323535326566386438636634316336663836663963663961623533643836353734316366646238333366303662227d2c7b22696e646578223a332c226964223a2231323035303234383261636236353634623139623930363533663665396338303632393265386161383366373865376139333832613234613665666534316330633036663339227d2c7b22696e646578223a342c226964223a2231323035303236373939333061343261616633633639373938636138613366313265313334633031393430353831386437383364313137343865303339646538353135393838227d2c7b22696e646578223a352c226964223a2231323035303234363864643138393965643264316363326238323938383261313635613065636236613734356166306337326562323938326436366234333131623465663733227d2c7b22696e646578223a362c226964223a2231323035303265623162616162363032633538393932383235363163646161613761616262636464306363666362633365373937393361633234616366393037373866333561227d2c7b22696e646578223a372c226964223a2231323035303331653037373966356335636362323631323335326665346132303066393964336537373538653730626135336636303763353966663232613330663637386666227d5d2c22706f735f7461626c65223a5b362c342c332c352c362c312c322c352c342c372c342c322c332c332c372c362c352c342c362c352c312c342c332c312c322c352c322c322c362c312c342c352c342c372c322c332c342c312c352c372c342c312c322c322c352c362c342c342c322c372c332c362c362c352c312c372c332c312c362c312c332c332c322c342c342c312c352c362c352c312c322c362c372c352c362c332c342c372c372c332c322c372c312c352c362c352c322c332c362c322c362c312c372c372c372c312c372c342c332c332c332c322c312c372c355d2c226d61785f626c6f636b5f6368616e67655f76696577223a36303030307d7d9fe171f3fe643eb1c188400b828ba184816fc9ac0000'
        const genesisPubKey = '0x1205041e0779f5c5ccb2612352fe4a200f99d3e7758e70ba53f607c59ff22a30f678ff757519efff911efc7ed326890a2752b9456cc0054f9b63215f1d616e574d6197120504468dd1899ed2d1cc2b829882a165a0ecb6a745af0c72eb2982d66b4311b4ef73cff28a6492b076445337d8037c6c7be4d3ec9c4dbe8d7dc65d458181de7b5250120504482acb6564b19b90653f6e9c806292e8aa83f78e7a9382a24a6efe41c0c06f39ef0a95ee60ad9213eb0be343b703dd32b12db32f098350cf3f4fc3bad6db23ce120504679930a42aaf3c69798ca8a3f12e134c019405818d783d11748e039de8515988754f348293c65055f0f1a9a5e895e4e7269739e243a661fff801941352c387121205048172918540b2b512eae1872a2a2e3a28d989c60d95dab8829ada7d7dd706d658df044eb93bbe698eff62156fc14d6d07b7aebfbc1a98ec4180b4346e67cc3fb01205048b8af6210ecfdcbcab22552ef8d8cf41c6f86f9cf9ab53d865741cfdb833f06b72fcc7e7d8b9e738b565edf42d8769fd161178432eadb2e446dd0a8785ba088f120504eb1baab602c5899282561cdaaa7aabbcdd0ccfcbc3e79793ac24acf90778f35a059fca7f73aeb60666178db8f704b58452b7a0b86219402c0770fcb52ac9828c'
        
        it('InitGenesisBlock should revert', async function () {
            await expectRevert(this.ECCM1.initGenesisBlock(genesisHeader, genesisPubKey), "EthCrossChainData contract has already been initialized!");
        });
        const proofy = '0xd020e91d858cba58b3dff91bf4b3adcacabf899e106ed6ad86a16a4a29e7817e307c080000000000000020b697330bd7a5850235f97d1bcd1c37739f4bc79a4f8e635dcb46ba45bc600ef4012f14f71b55ef55cedc91fd007f7a9ba386ec978f3aa80200000000000000144ddcf539d13e92d4151b7f5e607d4a09f725c47d06756e6c6f636b4a14000000000000000000000000000000000000000014344cfc3b8635f72f14200aaf2168d9f75df86fd36226100000000000000000000000000000000000000000000000000000000000';
        const blockHeadery1 = '0x000000009b91561700000000285c4b50cb092422c306eee00b18730bd1e05f0c144bc04d0adf1f44e0aef6c70000000000000000000000000000000000000000000000000000000000000000829ba7727b3bb7d42eff74342bafb37362b4898169750e8b2b8af2267c863ebf6fb8849a086fbed1ccd873b63642cce60ac54875cc3c1f054c1866e0bca5136dc90a185f5e4100007de0abdc2a5b63d5fd0c017b226c6561646572223a312c227672665f76616c7565223a224249703243555764736c424c6b34754979584174417949682f74685a6b5072445539566279697358754c574d6e634a775a49515161434f4b74724474793437454d3541554e4a7542523133546b6857616e56422b4b7a493d222c227672665f70726f6f66223a224a3830534c2b6c62433537306f64426374486f477a45504631516d506f7a4f4332323132553563796b4949346a6b77374d2f74746f317537386e4634347256433443676d344f786f71667943656b3568487132576a413d3d222c226c6173745f636f6e6669675f626c6f636b5f6e756d223a302c226e65775f636861696e5f636f6e666967223a6e756c6c7d0000000000000000000000000000000000000000'
        const headerProofy = '0x'
        const curRawHeader = '0x'
        const signaturesy1 = '0x96274d33426ab59a6d83e591a58be5f1f8735ee7c5a946abf1d49a3bad15f8046a93a4ba2a3bada54de7a8021b56547a191a06cf905e7e20a840a1d34332a07f00636e2d5bab2c864353be89ef2c03b81dc5aeef2f0c3f50d65613b05220bb20e26ae9ab8c8810b6aaa6592d2337b367c4d5dce6b3c83a76935ef90022f54d640f0139829b2c3848c57f33bf1268fde4c702f21f7a7255ba3a66b80c0f2eb3f14fcb547bfcea8ff15464cd8e577a9934f78ce396a60455fb55c851a8e5e3c2322f8e0028f2cc6133c1d7c67be27ba12033ff903a445292e6229640109452125758c4982632257d0f9813bbc27edb7b436b8f9adc0e3d7fe5ed1d55c1e6bd4ac2bf34460093acf1f6a5cf90840cd2e119a09dcf551d8727414eee3de239776d6f83ccaedd2603d1c78034fb34fbe8bb9a8df3c03063e37cfcab6eebdedb705d4db0ec6f9300'
        const blockHeightx1 = new web3.utils.BN('16734');
        it('in new EthCrossChainManager contract, should SyncAndVerify correctly', async function () {
            const {logs} = await this.ECCM1.verifyHeaderAndExecuteTx(proofy, blockHeadery1, headerProofy, curRawHeader, signaturesy1);
            expectEvent.inLogs(logs, 'VerifyHeaderAndExecuteTxEvent', {
                fromChainID: new web3.utils.BN('8'),
                toContract: '0x4ddcf539d13e92d4151b7f5e607d4a09f725c47d',
                crossChainTxHash:'0xe91d858cba58b3dff91bf4b3adcacabf899e106ed6ad86a16a4a29e7817e307c',
                fromChainTxHash:'0xb697330bd7a5850235f97d1bcd1c37739f4bc79a4f8e635dcb46ba45bc600ef4',
            });
        });
        it('in new EthCrossChainManager contract, SyncAndVerify throws error on sync same block height header twice', async function () {
            await expectRevert(this.ECCM1.verifyHeaderAndExecuteTx(proofy, blockHeadery1, headerProofy, curRawHeader, signaturesy1), "the transaction has been executed!");
        });
    });

    describe('Here, we try to use new method in the new EthCrossChainManager contract,', async function () {
        const a = new web3.utils.BN('123456789');
        const b = new web3.utils.BN('987654321');
        const expectResult = a.add(b);
        it('in new EthCrossChainManager contract, should addFunctionTest1 correctly', async function () {
            const res = await this.ECCM1.addFunctionTest1.call(a, b);
            assert.equal(expectResult.toNumber(), res.toNumber());
        });
    });
    describe('verifyHeaderAndExecuteTx after upgrade contract', function () {
        const proofx = '0xd0208a184af59286e0551fdfd485659957ace24bb7861777778886415ef1a0952c6908000000000000002015d2710ed6168a4042a9f3e12c3398e3e57fb47c95f5f7346480d0584f658c3c013014f71b55ef55cedc91fd007f7a9ba386ec978f3aa80200000000000000146aba9e15019537ac636932a4224ad99099116af006756e6c6f636b4a14000000000000000000000000000000000000000014344cfc3b8635f72f14200aaf2168d9f75df86fd323ee350000000000000000000000000000000000000000000000000000000000';
        const blockHeaderx1 = '0x000000009b91561700000000c257d1ec56f09dda12a556f32a0d5518af470a5feecd35e984b18d347da47d480000000000000000000000000000000000000000000000000000000000000000a139bb8b9a0b35e76595c7a9c7ca01d9c93880298596c69c450cafe05aacceacc837b91e5d04ea6087fc337713c6ab67148e0d7c7c156fafaf3aea2ff43927a3f134195fe34f0000c6fec9145c223bc1fd0c017b226c6561646572223a312c227672665f76616c7565223a22424871556f7444456b56566e6b5070374542656f4b45384d514b4e4d72457a5a37316943687149494272554d3754765270532f634a4f2b393959725a7a3238494e424b6c44764e5969394945364f7079783850394942453d222c227672665f70726f6f66223a224c594931577864616236434b37414b2f757a655854716246576d6f5a4f756264776f7036656a374267796a4d4470732f64674f797961634e73464630536c627a756173546e416648656c68366b574d4b7561415464413d3d222c226c6173745f636f6e6669675f626c6f636b5f6e756d223a302c226e65775f636861696e5f636f6e666967223a6e756c6c7d0000000000000000000000000000000000000000'
        const headerProofx = '0x'
        const curRawHeader = '0x'
        const signaturesx1 = '0x92f40fa8f87cd87d7cb96ea642483c6c409c3c13cb84952630a25f27a2ee704970af4297c95176b6503d1cc1b81dcb909c706cdbce3adc49bb871ad2222af96200f85d5a3dfb819ea7f73bf20aebb6525a5a6876de50f87c2edf8900d95d0d686950134248169ac2b11a664b355c810213807678289744ee19f6871dd398cdab6200932845fd0521272757c49046e32de224fd2d01c3f1b927dac145c7ee5bfab6dc3ba930ffb380fd09f6ff66c7c60938c569f7bf12827c672dae5d0537f69f17c4016c719a7fe326497e5d629a615aa4ea0e51abc273b4b9dc98641bff1129c253947ac6d091b5a9535deb96724703429c4f7db6f415dd9cdf54ebc958bc98e1b13701d9fc63fe5ae62262b11e8580e5fa4f6c2ce721298a50464aaf553a1f86c636a852e9e4d0bba71234fa5a2b9e40dc080b1f2e0de06195d9c8ba98e869276a68be010509a48b44e4b648e31fe166131ba2ac072c45f09d3e74a2c892cef7b9acdf1a587ae09340b051185cd22763971b0c0447c5e5a9b353cc4ce4b73d69a9579b1501'
        const blockHeightx1 = new web3.utils.BN('20451');
        it('verifyHeaderAndExecuteTx correctly after upgrade contract', async function () {
            const {logs} = await this.ECCM1.verifyHeaderAndExecuteTx(proofx, blockHeaderx1, headerProofx, curRawHeader, signaturesx1);
            expectEvent.inLogs(logs, 'VerifyHeaderAndExecuteTxEvent', {
                fromChainID: new web3.utils.BN('8'),
                toContract: '0x6aba9e15019537ac636932a4224ad99099116af0',
                crossChainTxHash:'0x8a184af59286e0551fdfd485659957ace24bb7861777778886415ef1a0952c69',
                fromChainTxHash:'0x15d2710ed6168a4042a9f3e12c3398e3e57fb47c95f5f7346480d0584f658c3c',
            });
        });

        it('verifyHeaderAndExecuteTx throws error on sync same block height header twice after upgrade contract', async function () {
            await expectRevert(this.ECCM1.verifyHeaderAndExecuteTx(proofx, blockHeaderx1, headerProofx, curRawHeader, signaturesx1), "the transaction has been executed!");
        });
    });
});