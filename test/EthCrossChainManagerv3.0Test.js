const { expectRevert, expectEvent, constants, BN } = require('@openzeppelin/test-helpers');
const { expect } = require('chai');
const EthCrossChainManager = artifacts.require('./../contracts/core/v2.0/CrossChainManager/EthCrossChainManager');
const EthCrossChainData = artifacts.require('./../contracts/core/v2.0/CrossChainManager/EthCrossChainData');
const EthCrossChainManagerProxy = artifacts.require('./../contracts/core/v2.0/CrossChainManager/EthCrossChainManagerProxy');
// const NewEthCrossChainManager = artifacts.require('./../contracts/core/v2.0/CrossChainManager/NewEthCrossChainManager');
contract('EthCrossChain', (accounts) => {

    before(async function () {
        this.ECCD = await EthCrossChainData.new({ from: accounts[0], value: web3.utils.toWei('0', 'ether'), gas: 20000000, gasPrice: 50 });
        console.log("this.ECCD.address = ", this.ECCD.address);
        this.ECCM = await EthCrossChainManager.new(this.ECCD.address, { from: accounts[0], value: web3.utils.toWei('0', 'ether'), gas: 40000000, gasPrice: 50 });
        console.log("this.ECCM.address........... = ", this.ECCM.address);
        this.ECCMP = await EthCrossChainManagerProxy.new(this.ECCM.address, { from: accounts[0], value: web3.utils.toWei('0', 'ether'), gas: 40000000, gasPrice: 50 });
        console.log("this.ECCMP.address........... = ", this.ECCMP.address);
        // this.ECCM1 = await NewEthCrossChainManager.new(this.ECCD.address, { from: accounts[0], value: web3.utils.toWei('0', 'ether'),gas: 400000000, gasPrice: 50 });
        // console.log("this.ECCM1.address........... = ", this.ECCM1.address);
    });

    describe('transferOwnership', function () {
        it('this.ECCD.transferOwnership(this.ECCM.address) correctly', async function () {
            let owner = await this.ECCD.owner.call();
            assert.equal(owner, accounts[0]);

            const {logs} = await this.ECCD.transferOwnership(this.ECCM.address);
            expectEvent.inLogs(logs, 'OwnershipTransferred', {
                previousOwner:accounts[0],
                newOwner:this.ECCM.address,
            });
            owner = await this.ECCD.owner.call();
            assert.equal(owner, this.ECCM.address);
        });
        it('this.ECCM.transferOwnership(this.ECCMP.address) correctly', async function () {
            let owner = await this.ECCM.owner.call();
            assert.equal(owner, accounts[0]);
            const {logs} = await this.ECCM.transferOwnership(this.ECCMP.address, { from: accounts[0] });
            expectEvent.inLogs(logs, 'OwnershipTransferred', {
                previousOwner:accounts[0],
                newOwner:this.ECCMP.address,
            });
            owner = await this.ECCM.owner.call();
            assert.equal(owner, this.ECCMP.address);
        });
        it('this.ECCMP.getEthCrossChainManager() correctly', async function () {
            let eccm = await this.ECCMP.getEthCrossChainManager();
            assert.equal(eccm, this.ECCM.address);
        });

    });
    describe('InitGenesisBlock', function () {

        const genesisHeader = '0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d46975427d33a25a8a259d0fa90fa6c7ae312726ab98ea3eb524ac4f3796760f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c8365b000000001dac2b7c00000000fd1a057b226c6561646572223a343239343936373239352c227672665f76616c7565223a22484a675171706769355248566745716354626e6443456c384d516837446172364e4e646f6f79553051666f67555634764d50675851524171384d6f38373853426a2b38577262676c2b36714d7258686b667a72375751343d222c227672665f70726f6f66223a22785864422b5451454c4c6a59734965305378596474572f442f39542f746e5854624e436667354e62364650596370382f55706a524c572f536a5558643552576b75646632646f4c5267727052474b76305566385a69413d3d222c226c6173745f636f6e6669675f626c6f636b5f6e756d223a343239343936373239352c226e65775f636861696e5f636f6e666967223a7b2276657273696f6e223a312c2276696577223a312c226e223a372c2263223a322c22626c6f636b5f6d73675f64656c6179223a31303030303030303030302c22686173685f6d73675f64656c6179223a31303030303030303030302c22706565725f68616e647368616b655f74696d656f7574223a31303030303030303030302c227065657273223a5b7b22696e646578223a312c226964223a2231323035303238353361303331616366343162333734613239326538626437383464373438316337303735306532326338363962396564383335373564313363356631303865227d2c7b22696e646578223a322c226964223a2231323035303237343032353036643036623564316566336233393133643661323633653334316463646162396331303931333064393336353865343839396361356534613461227d2c7b22696e646578223a332c226964223a2231323035303362613165353764633363646236326430626239633663653835633638333834353562343535333734383737613436636266633162363432643465646262323034227d2c7b22696e646578223a342c226964223a2231323035303363386338623261326330393163323565393162316438373762393036346639613362656339666665336263323136383536646561373264313765663137366461227d2c7b22696e646578223a352c226964223a2231323035303261643630383263396235353439626130636539376366623463666334666461313234336365393038396663346634396562633534643864643537323830663430227d2c7b22696e646578223a362c226964223a2231323035303362633432333934303365613833663666336337336530313262623134363239373862633464623332343763363531633063623665306139313936643365306561227d2c7b22696e646578223a372c226964223a2231323035303330313231643631386335636136653235353266306336343562376363616264613962363665663165356463613062666636353538646136313036343265373434227d5d2c22706f735f7461626c65223a5b322c372c362c352c362c312c322c372c322c372c332c332c372c352c352c322c372c342c322c332c332c312c362c322c342c332c312c352c352c362c342c352c342c372c372c362c332c352c312c312c372c362c352c312c322c362c332c342c332c352c322c332c312c362c312c372c322c342c362c342c372c332c332c332c362c322c372c342c312c342c312c342c352c342c332c362c342c372c332c322c352c312c322c362c312c322c372c362c312c312c352c352c362c322c342c352c342c342c332c372c312c322c362c372c355d2c226d61785f626c6f636b5f6368616e67655f76696577223a31303030307d7d204c1555e95d5ba2381d4eb4655d62ff9d1cab14'
        const genesisPubKey = '0x1205040121d618c5ca6e2552f0c645b7ccabda9b66ef1e5dca0bff6558da610642e7446f7c15066b50ca504a8a801c32a3cc25a31c45680ce70c445cfa919a0b2b70bd1205047402506d06b5d1ef3b3913d6a263e341dcdab9c109130d93658e4899ca5e4a4a3e1ae6cd04dc8091b32aadcbef8da85bca09741f48620f30e8420de5be86e51c120504853a031acf41b374a292e8bd784d7481c70750e22c869b9ed83575d13c5f108e21b72088af43c52dc0e578a7fcbeba3090c373dc09e396c52c8e022d222ca83c120504ad6082c9b5549ba0ce97cfb4cfc4fda1243ce9089fc4f49ebc54d8dd57280f4016e1bdee8dda5f72e7af1e831a665906f2e01194125c562a76d35f6349428fca120504ba1e57dc3cdb62d0bb9c6ce85c6838455b455374877a46cbfc1b642d4edbb20443cb68dbea75cd1eb6b4228eb82ba3d66c58509dfda28df23e7c70e7dc52999d120504bc4239403ea83f6f3c73e012bb1462978bc4db3247c651c0cb6e0a9196d3e0ea94d564007fac4bc0c8475b375e4889365a54289978927b837f7c6d9b51f311cb120504c8c8b2a2c091c25e91b1d877b9064f9a3bec9ffe3bc216856dea72d17ef176da469df06240a0943911dca5b3fbe09fa83e11cbc9f75558e93db9a62d71e9a18f'
        // const genesisPubKey = '0x12050412f10239513143c02984bc4ea9d854883fcdf49732dc727dfa747482fc807e64ea4890067da5d75e3ce914dea1ab10d5d0774fd85e5a897c7cedb7a0ad694ef512050433c44837ddb94ad5fa0eb460b0f49154f90503619d4d2c8ee08330fb815841d2176c8ae35f754fa8876a25f63a25bcfa37548e2291f7ee55ddb790a36a88625512050444017ccca820d90f0ebb461df46337b0923b0ae2bce583cee1a2624c9208e208925fc299c1ce5437244e6774a34b2d51e45607eb9063606b943d015c8e391091120504a6b1b0e1c6977f44f36232a5f3b61b6a859b4ce5147c49accfa9a42f483f1204a349865a96ce5e181b98505ee8d64c8c87062cb3e67eccd2ad26c758b3b62cc7120504c6e681e5154efba64c75b0aa1ca54489bae7653077d16ddd9726f365be30622d3dc5c23474427b87e704319a440669092cf994f81acd8a567c96ddaaa8313349120504d101838807ec4079a46fe98d6bd9a0690abcbd8ce16e0fbc4520c7c7ef7885db612e135ec789514deb3a324d119519a3bc98dcb2607854e12d2b714bfe5b1c13120504ff7dfc705bb5ac68d2e89230c662999aeb18284131e9fce94ef9faf5b991753d39d4cfd17858edf9cfc1cf755dcb0162fceab314a028e8bc35e1c2b42fda8dc4'
        // const genesisHeaderWithWrongBookKeeper = "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c033644e70a2b4f8de4a15c4a0cd79315673b8346d033804807058f3ff4252900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c8365b000000001dac2b7c00000000fd1a057b226c6561646572223a343239343936373239352c227672665f76616c7565223a22484a675171706769355248566745716354626e6443456c384d516837446172364e4e646f6f79553051666f67555634764d50675851524171384d6f38373853426a2b38577262676c2b36714d7258686b667a72375751343d222c227672665f70726f6f66223a22785864422b5451454c4c6a59734965305378596474572f442f39542f746e5854624e436667354e62364650596370382f55706a524c572f536a5558643552576b75646632646f4c5267727052474b76305566385a69413d3d222c226c6173745f636f6e6669675f626c6f636b5f6e756d223a343239343936373239352c226e65775f636861696e5f636f6e666967223a7b2276657273696f6e223a312c2276696577223a312c226e223a372c2263223a322c22626c6f636b5f6d73675f64656c6179223a31303030303030303030302c22686173685f6d73675f64656c6179223a31303030303030303030302c22706565725f68616e647368616b655f74696d656f7574223a31303030303030303030302c227065657273223a5b7b22696e646578223a312c226964223a2231323035303364313031383338383037656334303739613436666539386436626439613036393061626362643863653136653066626334353230633763376566373838356462227d2c7b22696e646578223a322c226964223a2231323035303361366231623065316336393737663434663336323332613566336236316236613835396234636535313437633439616363666139613432663438336631323034227d2c7b22696e646578223a332c226964223a2231323035303266663764666337303562623561633638643265383932333063363632393939616562313832383431333165396663653934656639666166356239393137353364227d2c7b22696e646578223a342c226964223a2231323035303334343031376363636138323064393066306562623436316466343633333762303932336230616532626365353833636565316132363234633932303865323038227d2c7b22696e646578223a352c226964223a2231323035303331326631303233393531333134336330323938346263346561396438353438383366636466343937333264633732376466613734373438326663383037653634227d2c7b22696e646578223a362c226964223a2231323035303333336334343833376464623934616435666130656234363062306634393135346639303530333631396434643263386565303833333066623831353834316432227d2c7b22696e646578223a372c226964223a2231323035303363366536383165353135346566626136346337356230616131636135343438396261653736353330373764313664646439373236663336356265333036323264227d5d2c22706f735f7461626c65223a5b362c352c342c332c372c322c372c372c352c352c322c322c322c322c362c352c322c342c312c332c342c312c342c332c332c322c342c352c372c312c342c332c342c352c332c352c352c342c322c312c342c332c312c352c352c352c322c362c342c332c312c362c322c322c312c332c332c322c332c372c372c362c342c342c362c372c372c362c322c362c372c372c312c332c342c312c352c362c322c372c342c342c362c352c312c332c352c372c352c332c312c362c312c322c362c362c312c372c362c362c372c332c372c312c315d2c226d61785f626c6f636b5f6368616e67655f76696577223a31303030307d7da969bae1168780e35a40c4d1af2dede531fd6fb8";
        // it('InitGenesisBlock revert since wrongbookkeeper', async function () {
        //     let pauseStatus = await this.ECCMP.paused();
        //     assert.equal(pauseStatus, false);
        //     await expectRevert(this.ECCM.InitGenesisBlock(genesisHeaderWithWrongBookKeeper, genesisPubKey), "NextBookers illegal");
        // });
        it('InitGenesisBlock correctly', async function () {
            let pauseStatus = await this.ECCMP.paused();
            assert.equal(pauseStatus, false);
            const expectedLatestHeight = new web3.utils.BN('0');

            const { logs } = await this.ECCM.InitGenesisBlock(genesisHeader, genesisPubKey);
            expectEvent.inLogs(logs, 'InitGenesisBlockEvent', {
                height: expectedLatestHeight,
                rawHeader: genesisHeader,
            });

            let savedHeaderBs = await this.ECCD.getMCHeaderBytes(0);
            assert.equal(savedHeaderBs, genesisHeader);

            let savedLatestHeight = await this.ECCD.getLatestHeight();
            expect(savedLatestHeight).to.be.bignumber.equal(expectedLatestHeight);

            let savedLatestBKHeight = await this.ECCD.getLatestBookKeeperHeight();
            expect(savedLatestBKHeight).to.be.bignumber.equal(expectedLatestHeight);

            let isInited = await this.ECCD.isGenesisBlockInited();
            assert.equal(isInited, true);

            let mcKeeperHeight = await this.ECCD.getMCKeeperHeight();
            expect(mcKeeperHeight[0]).to.be.bignumber.equal(expectedLatestHeight);

            let mcKPB = await this.ECCD.getMCKeeperPubBytes(mcKeeperHeight);
            console.log('mcKB = ', mcKPB);
        });

        it('InitGenesisBlock throws error on InitGenesisBlock twice', async function () {
            await expectRevert(this.ECCM.InitGenesisBlock(genesisHeader, genesisPubKey), "EthCrossChainData contract has already been initialized!");
        });

    });

    describe('SyncBlockHeader', function () {

        const blockHeader1 = '0x000000000000000000000000d1305765f398da92f26be2b2596c39289feb00643e6bee02bd2a4a76cadce3160000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003e1974385265ae208b368eeb82730ca495fa009552d29e81f5bc551a90b83dce2a9a65e01000000121080d0b0053926fd0c017b226c6561646572223a342c227672665f76616c7565223a224242562b4c6e2b69344872666850397468562f6c72662f3972565631685633434a7961517841706678346e7064663644736e784671464e7a6b48494f6d5454326466736b52634b7a344e6b784a4177594d6150484f62453d222c227672665f70726f6f66223a22436f4a7a5649645674612b4c536b497869534e374e45534c5933767a4b5551547653326a4a636e634571394175696a6364367278497a4e582b4d303176454a77443949413267732f31685a7642527371386f393746413d3d222c226c6173745f636f6e6669675f626c6f636b5f6e756d223a302c226e65775f636861696e5f636f6e666967223a6e756c6c7d0000000000000000000000000000000000000000'
        const signatures1 = '0x7750111308bebc187a5944ea2c24b2ca7cb7083a1de3bdc4ffe4e0dcc9a60ad47b453b384408b2225f45fba53df87a1d21694a40d55bbad081cea5cf955cc611011fe35374f5f69870d17ceaa52a323b5c5939b1b836b5c66aa20c205706a86723011d2e77b14ec18aed0e34c14543b81ba3cd53dea8e99c1d1e6ef23fb5fca9570118abc3527171b211c9a277d21c53e634ffd8feca775369445b78dd63eab8bede31bcdb31142953657277a074c33ec284c031465c3dc00d7256a08a4f7bb239d600056dcd4fda9f4bcef3afbbac436e62cb2c3fbf2e0d683ea9d631b532020ec9b139f20cba1490ff65446a268363c25ae3e47d96092a852fff512f058697e586d700f73710730779ce81de3680b0c10366c0566248044ec341943cb167bfc5c2f6270c9e01b38373362a94573407ecd3d936145e2da160007b7b4a691bac38f804cd00'
        
        const expectedLatestBKHeight = new web3.utils.BN('0');;
        const expectedLatestHeight = new web3.utils.BN('1');;
        it('SyncBlockHeader correctly', async function () {
            const {logs} = await this.ECCM.SyncBlockHeader(blockHeader1, signatures1);
            expectEvent.inLogs(logs, 'SyncBlockHeaderEvent', {
                height: expectedLatestHeight,
                rawHeader: blockHeader1,
            });
            let savedHeaderBs = await this.ECCD.getMCHeaderBytes(1);
            assert.equal(savedHeaderBs, blockHeader1);

            let savedLatestHeight = await this.ECCD.getLatestHeight();
            expect(savedLatestHeight).to.be.bignumber.equal(expectedLatestHeight);

            let savedLatestBKHeight = await this.ECCD.getLatestBookKeeperHeight();
            expect(savedLatestBKHeight).to.be.bignumber.equal(expectedLatestBKHeight);

            let isInited = await this.ECCD.isGenesisBlockInited();
            assert.equal(isInited, true);

            let mcKeeperHeight = await this.ECCD.getMCKeeperHeight();
            expect(mcKeeperHeight[0]).to.be.bignumber.equal(expectedLatestBKHeight);
            assert(mcKeeperHeight.length, 1);

            let mcKPB = await this.ECCD.getMCKeeperPubBytes(mcKeeperHeight);
            console.log('mcKB = ', mcKPB);
        });
    });

    // describe('SyncAndVerify', function () {

    //     const blockHeaderx1 = '0x000000000000000000000000267ea36d4e0de0486c5dad221f95a768ecf55a40e2d02107f4b38bc53b855b6d0000000000000000000000000000000000000000000000000000000000000000cf90180758e06fc88065f10b6bd55f2ff9984e468c416f57e025de3f7b8fe7618627ccee4367535235cccb03f32fb814c358cbcaec75e2cd738bf2f312fa715eaf236b5e1f2700003ad883c5d18cb422fd10017b226c6561646572223a332c227672665f76616c7565223a2242444d422b646f69534d483232774e58433273583253576e7a3938355848585a6c65707178644b41534e4673534b5468504746325a46587347767943725a5a7a487470333137705245384f36324a54346264784a4d78733d222c227672665f70726f6f66223a22324e4a47315a4d586a7a4b79507846466b7269753737684631754d4c716e6c77666634417768726352796b72646959364666496c576d57656a466b58586a5839506b77596c746a746f4e525a642f583163416c494f513d3d222c226c6173745f636f6e6669675f626c6f636b5f6e756d223a31303030302c226e65775f636861696e5f636f6e666967223a6e756c6c7d0000000000000000000000000000000000000000'
    //     const signaturesx1 = '0xe2ddfe91cb678a38e8466d8e50aee4fddd153103f1466b8e85c5d1e7f868ad763b43b91c345460ba1309c1c8c490a9881f69528418f6d470751f9e6b47db8afe00027791ed4835a5547665ab83a43f1decdbf8803f176d85b271b2ff59ac6ae6877cf2394b24ea661ec5b5f97e95ad47fb00ec86730251c1fd1245283d9a665673019aef4390b7e2e83e263f0236a47f72ec6965509f10aeede796ef295f0a2e759d1491b45dfc71739be160e6b7a544bb1e2a633b834116e27f808d6c9bff8ba36f005e43001038d03b370bf28650e3a5e5d4c84b89abf597ec3109a75c442337bd8c55601b3d9cacef68a1f1ff6c3d2617a70de943ab51ed26b50031bc7e973fba8c017691568c497cc5c3dcf2c1b414d36bb52be4366b32f09d9d84e3766303d8fee83f06383664a5bca0b27ca9a7fdebe4a012d1e4801a8134cf11b87bcd69bedca701e600307daaab39b39998f1cff0cb6ae3c4e3ded993046617e5e0482953d6d6236074faef53ef1fc36a502de4c5f7cc15e504b4b00bd4710e3fba594429dbc72e01'
    //     const crossStateRootx1 = '0xcf90180758e06fc88065f10b6bd55f2ff9984e468c416f57e025de3f7b8fe761';
    //     const proofx = [];
    //     const positionx = [];
    //     const merkelValuesx = '0x20b086a16b0175978a0657e34080ebe66c91272e7209ed5e4ebe5afc5179092dea030000000000000020443dd0a8434a0975688d7f02424b79d787c3df6823851e86ab6f26ca76db915708040000000000000014eddceb99f62cf23b9c4ca91942ffbdb8b555db500200000000000000145e43a235a4c63a897372a12f34dbe569759bb4c506756e6c6f636b4a14000000000000000000000000000000000000000014f41089700d6d950c8c379772f8a12b12955db8860065cd1d00000000000000000000000000000000000000000000000000000000';
    //     const blockHeightx1 = new web3.utils.BN('10015');
    //     // it('SyncBlockHeaderx1 correctly', async function () {
    //     //     const { logs } = await this.ECCM.SyncBlockHeader(blockHeaderx1, signaturesx1);
    //     //     expectEvent.inLogs(logs, 'SyncBlockHeaderEvent', {
    //     //         height: blockHeightx1,
    //     //         rawHeader: blockHeaderx1,
    //     //     });
    //     // });
    //     it('SyncAndVerify correctly', async function () {
    //         const {logs} = await this.ECCM.SyncAndVerify(blockHeaderx1, signaturesx1, proofx, positionx, merkelValuesx, blockHeightx1);
    //         expectEvent.inLogs(logs, 'SyncBlockHeaderEvent', {
    //             height: blockHeightx1,
    //             rawHeader: blockHeaderx1,
    //         });
    //         expectEvent.inLogs(logs, 'VerifyAndExecuteTxEvent', {
    //             fromChainID: new web3.utils.BN('3'),
    //             toContract: '0x5e43a235a4c63a897372a12f34dbe569759bb4c5',
    //             crossChainTxHash:'0xb086a16b0175978a0657e34080ebe66c91272e7209ed5e4ebe5afc5179092dea',
    //             fromChainTxHash:'0x443dd0a8434a0975688d7f02424b79d787c3df6823851e86ab6f26ca76db9157',
    //         });
    //     });

    //     it('SyncAndVerify throws error on sync same block height header twice', async function () {
    //         await expectRevert(this.ECCM.SyncAndVerify(blockHeaderx1, signaturesx1, proofx, positionx, merkelValuesx, blockHeightx1), "the transaction has been executed!");
    //     });
    // });

    // describe('Here, we demonstrate the steps to upgrade EthCrossChainManagerContract,', async function () {
    //     it('first, owner of this.ECCMP invoke this.ECCMP.pauseEthCrossChainManager()', async function () {
    //         const {logs} = await this.ECCMP.pauseEthCrossChainManager({from:accounts[0]});
    //         expectEvent.inLogs(logs, 'Paused', {
    //             account:accounts[0],
    //         });
    //         expectEvent.inLogs(logs, 'Paused', {
    //             account:this.ECCMP.address,
    //         });
    //         expectEvent.inLogs(logs, 'Paused', {
    //             account:this.ECCM.address,
    //         });
    //         let pauseStatusECCMP = await this.ECCMP.paused();
    //         assert.equal(pauseStatusECCMP, true);
    //         let pauseStatusECCM = await this.ECCM.paused();
    //         assert.equal(pauseStatusECCM, true);
    //         let pauseStatusECCD = await this.ECCD.paused();
    //         assert.equal(pauseStatusECCD, true);
    //     });
    //     it('second, we deploy the new version of EthCrossChainManager contract which we have done in before with hash = this.ECCM1.address', async function () {
    //         console.log('new version of EthCrossChainManager contract  address we deployed previously: \n', this.ECCM1.address);
    //     });
    //     it('third, the deployer invoke this.ECCM1.transferOwnership(this.ECCMP.address)', async function () {
    //         let owner = await this.ECCM1.owner();
    //         assert.equal(owner, accounts[0]);
    //         const {logs} = await this.ECCM1.transferOwnership(this.ECCMP.address, { from: accounts[0] });
    //         expectEvent.inLogs(logs, 'OwnershipTransferred', {
    //             previousOwner:accounts[0],
    //             newOwner:this.ECCMP.address,
    //         });
    //         owner = await this.ECCM.owner();
    //         assert.equal(owner, this.ECCMP.address);
    //     });
    //     it('forth, the owner of this.ECCMP invoke this.ECCMP.upgradeEthCrossChainManager(this.ECCM1.address)', async function () {
    //         let ownerOfECCD = await this.ECCD.owner();
    //         let ownerOfECCM = await this.ECCM.owner();
    //         let ownerOfECCMP = await this.ECCMP.owner();
    //         assert.equal(ownerOfECCD, this.ECCM.address);
    //         assert.equal(ownerOfECCM, this.ECCMP.address);
    //         assert.equal(ownerOfECCMP, accounts[0]);
    //         await this.ECCMP.upgradeEthCrossChainManager(this.ECCM1.address, { from: accounts[0] });
    //         let newOwnerOfECCM1 = await this.ECCM1.owner();
    //         assert.equal(newOwnerOfECCM1, this.ECCMP.address);
    //     });
    //     it('fifth, the owner of this.ECCMP invoke this.ECCMP.unpauseEthCrossChainManager()', async function () {
    //         await this.ECCMP.unpauseEthCrossChainManager({ from: accounts[0] });
    //         const newEthCrossChainManagerAddr = await this.ECCMP.getEthCrossChainManager.call();
    //         assert.equal(newEthCrossChainManagerAddr, this.ECCM1.address);
    //         let pauseStatusECCMP = await this.ECCMP.paused();
    //         assert.equal(pauseStatusECCMP, false);
    //         let pauseStatusECCM = await this.ECCM.paused();
    //         assert.equal(pauseStatusECCM, true);
    //         let pauseStatusECCD = await this.ECCD.paused();
    //         assert.equal(pauseStatusECCD, false);
    //         let pauseStatusECCM1 = await this.ECCM1.paused();
    //         assert.equal(pauseStatusECCM1, false);
    //     });
    // });
    // describe('Here, we try to use old method in the old EthCrossChainManager contract, should revert due to status paused', async function () {
    //     const blockHeadery1 = '0x00000000000000000000000044fa6e0476ee93ca74f5e8129f0e051fc79b2de2f01372291af79165e52e8d4c000000000000000000000000000000000000000000000000000000000000000021ad6322ff64eacc0d5bdc672960571b626aaccdf0ea1ad5b880d90670ab9318e2972c6b8193ada1ad816f5307d8c9d1d874ec3296138fad53c9037945775ef24d266b5e8d270000d3f85855f7023928fd10017b226c6561646572223a342c227672665f76616c7565223a22424f4375696d53316c644b48447447624779716b345a4d706d556a4a42736f6c52365a76616f6a376e584b694b69742f543478385849347277456c4374336b7a4637617345714e4c4170745571417733544d68753370413d222c227672665f70726f6f66223a223550514143336f4e75532f75784b5a4942684330374a7a5546546b48774b7a5145436e6946485145524d63384f65314b534846634c344c65506a53336c622f3367486c4d6d55587377784a32644f4c663048366744773d3d222c226c6173745f636f6e6669675f626c6f636b5f6e756d223a31303030302c226e65775f636861696e5f636f6e666967223a6e756c6c7d0000000000000000000000000000000000000000'
    //     const signaturesy1 = '0x35cac63e234de92f2a3a111b7539b2549531d936e39eea4a84789140dd898b141a9429e2cf75670a42034e19a47bb6716c38ae6e3010f0d9fce1d70037534e0d012a46f61404689bf63b2a94f0e0b1eef80bdd1138ce764f2eaa948e0c7c054903164c7c882f9012c687d480dd047307cfc45fa968df191dbf6d53693b6623df9100b536e44c9b55e787cd47da95f695f1a8bb6501223504fc6cd0e9adc1f46e09150373bc19cd2e635864cc8d36cc8526b458b71d6a8f2a0f9528623711dc4f064d00a8f7017bd132d26df36e8c9b1b61d2ef36ebb1acdcd077356fb29a0ca166a1946531acb3969b8416cfde90885e6a71ce505ec0bb62c914384a57e7f102ffcc85018d62c55a0e58ec996928263f7a9432ea113351ec7cb27066438bf153c0c4f1153c08b6f8911db6e1b7993cc6131728e6529460e7e7971e2abb831b170179ace501a8d02c07db91fdf2e8eb60d28a383ebafdd3aacf80d55f76ee9bfd3397c39e7c4988ea584f3aeeefa8537da59161939f6dace17db00815c78b5179bd0dcc1b5401'
    //     const crossStateRooty1 = '0x21ad6322ff64eacc0d5bdc672960571b626aaccdf0ea1ad5b880d90670ab9318';
    //     const proofy = [];
    //     const positiony = [];
    //     const merkelValuesy = '0x20bcd86861b3553a750c7f456fdc75feea5a653cbe5afdfc26a9212d79a7a9fb200300000000000000204c91f13efe3bf0130740faffd0178259d7de04a64cef7f07f72f45081b60273708050000000000000014eddceb99f62cf23b9c4ca91942ffbdb8b555db500200000000000000145e43a235a4c63a897372a12f34dbe569759bb4c506756e6c6f636b4a14d874d6b41c7c44c9e5701582e849410946dbd12414a97cd854b11b54b7b8db09e1046e2a0e8eb7f5020100000000000000000000000000000000000000000000000000000000000000';
    //     const blockHeighty1 = new web3.utils.BN('10125');
        
    //     it('in old EthCrossChainManager contract, SyncAndVerify throws error on since contract status paused', async function () {
    //         await expectRevert(this.ECCM.SyncAndVerify(blockHeadery1, signaturesy1, proofy, positiony, merkelValuesy, blockHeighty1), "Pausable: paused");
    //     });
    // });
    // describe('Here, we try to use old method in the new EthCrossChainManager contract,', async function () {
    //     const genesisHeader = '0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c033644e70a2b4f8de4a15c4a0cd79315673b8346d033804807058f3ff4252900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c8365b000000001dac2b7c00000000fd1a057b226c6561646572223a343239343936373239352c227672665f76616c7565223a22484a675171706769355248566745716354626e6443456c384d516837446172364e4e646f6f79553051666f67555634764d50675851524171384d6f38373853426a2b38577262676c2b36714d7258686b667a72375751343d222c227672665f70726f6f66223a22785864422b5451454c4c6a59734965305378596474572f442f39542f746e5854624e436667354e62364650596370382f55706a524c572f536a5558643552576b75646632646f4c5267727052474b76305566385a69413d3d222c226c6173745f636f6e6669675f626c6f636b5f6e756d223a343239343936373239352c226e65775f636861696e5f636f6e666967223a7b2276657273696f6e223a312c2276696577223a312c226e223a372c2263223a322c22626c6f636b5f6d73675f64656c6179223a31303030303030303030302c22686173685f6d73675f64656c6179223a31303030303030303030302c22706565725f68616e647368616b655f74696d656f7574223a31303030303030303030302c227065657273223a5b7b22696e646578223a312c226964223a2231323035303364313031383338383037656334303739613436666539386436626439613036393061626362643863653136653066626334353230633763376566373838356462227d2c7b22696e646578223a322c226964223a2231323035303361366231623065316336393737663434663336323332613566336236316236613835396234636535313437633439616363666139613432663438336631323034227d2c7b22696e646578223a332c226964223a2231323035303266663764666337303562623561633638643265383932333063363632393939616562313832383431333165396663653934656639666166356239393137353364227d2c7b22696e646578223a342c226964223a2231323035303334343031376363636138323064393066306562623436316466343633333762303932336230616532626365353833636565316132363234633932303865323038227d2c7b22696e646578223a352c226964223a2231323035303331326631303233393531333134336330323938346263346561396438353438383366636466343937333264633732376466613734373438326663383037653634227d2c7b22696e646578223a362c226964223a2231323035303333336334343833376464623934616435666130656234363062306634393135346639303530333631396434643263386565303833333066623831353834316432227d2c7b22696e646578223a372c226964223a2231323035303363366536383165353135346566626136346337356230616131636135343438396261653736353330373764313664646439373236663336356265333036323264227d5d2c22706f735f7461626c65223a5b362c352c342c332c372c322c372c372c352c352c322c322c322c322c362c352c322c342c312c332c342c312c342c332c332c322c342c352c372c312c342c332c342c352c332c352c352c342c322c312c342c332c312c352c352c352c322c362c342c332c312c362c322c322c312c332c332c322c332c372c372c362c342c342c362c372c372c362c322c362c372c372c312c332c342c312c352c362c322c372c342c342c362c352c312c332c352c372c352c332c312c362c312c322c362c362c312c372c362c362c372c332c372c312c315d2c226d61785f626c6f636b5f6368616e67655f76696577223a31303030307d7dfd9e5473b163f591a8829d83288809d97c20ab2a'
    //     const genesisPubKey = '0x12050412f10239513143c02984bc4ea9d854883fcdf49732dc727dfa747482fc807e64ea4890067da5d75e3ce914dea1ab10d5d0774fd85e5a897c7cedb7a0ad694ef512050433c44837ddb94ad5fa0eb460b0f49154f90503619d4d2c8ee08330fb815841d2176c8ae35f754fa8876a25f63a25bcfa37548e2291f7ee55ddb790a36a88625512050444017ccca820d90f0ebb461df46337b0923b0ae2bce583cee1a2624c9208e208925fc299c1ce5437244e6774a34b2d51e45607eb9063606b943d015c8e391091120504a6b1b0e1c6977f44f36232a5f3b61b6a859b4ce5147c49accfa9a42f483f1204a349865a96ce5e181b98505ee8d64c8c87062cb3e67eccd2ad26c758b3b62cc7120504c6e681e5154efba64c75b0aa1ca54489bae7653077d16ddd9726f365be30622d3dc5c23474427b87e704319a440669092cf994f81acd8a567c96ddaaa8313349120504d101838807ec4079a46fe98d6bd9a0690abcbd8ce16e0fbc4520c7c7ef7885db612e135ec789514deb3a324d119519a3bc98dcb2607854e12d2b714bfe5b1c13120504ff7dfc705bb5ac68d2e89230c662999aeb18284131e9fce94ef9faf5b991753d39d4cfd17858edf9cfc1cf755dcb0162fceab314a028e8bc35e1c2b42fda8dc4'
        
    //     it('InitGenesisBlock should revert', async function () {
    //         await expectRevert(this.ECCM1.InitGenesisBlock(genesisHeader, genesisPubKey), "EthCrossChainData contract has already been initialized!");
    //     });
    //     const blockHeadery1 = '0x00000000000000000000000044fa6e0476ee93ca74f5e8129f0e051fc79b2de2f01372291af79165e52e8d4c000000000000000000000000000000000000000000000000000000000000000021ad6322ff64eacc0d5bdc672960571b626aaccdf0ea1ad5b880d90670ab9318e2972c6b8193ada1ad816f5307d8c9d1d874ec3296138fad53c9037945775ef24d266b5e8d270000d3f85855f7023928fd10017b226c6561646572223a342c227672665f76616c7565223a22424f4375696d53316c644b48447447624779716b345a4d706d556a4a42736f6c52365a76616f6a376e584b694b69742f543478385849347277456c4374336b7a4637617345714e4c4170745571417733544d68753370413d222c227672665f70726f6f66223a223550514143336f4e75532f75784b5a4942684330374a7a5546546b48774b7a5145436e6946485145524d63384f65314b534846634c344c65506a53336c622f3367486c4d6d55587377784a32644f4c663048366744773d3d222c226c6173745f636f6e6669675f626c6f636b5f6e756d223a31303030302c226e65775f636861696e5f636f6e666967223a6e756c6c7d0000000000000000000000000000000000000000'
    //     const signaturesy1 = '0x35cac63e234de92f2a3a111b7539b2549531d936e39eea4a84789140dd898b141a9429e2cf75670a42034e19a47bb6716c38ae6e3010f0d9fce1d70037534e0d012a46f61404689bf63b2a94f0e0b1eef80bdd1138ce764f2eaa948e0c7c054903164c7c882f9012c687d480dd047307cfc45fa968df191dbf6d53693b6623df9100b536e44c9b55e787cd47da95f695f1a8bb6501223504fc6cd0e9adc1f46e09150373bc19cd2e635864cc8d36cc8526b458b71d6a8f2a0f9528623711dc4f064d00a8f7017bd132d26df36e8c9b1b61d2ef36ebb1acdcd077356fb29a0ca166a1946531acb3969b8416cfde90885e6a71ce505ec0bb62c914384a57e7f102ffcc85018d62c55a0e58ec996928263f7a9432ea113351ec7cb27066438bf153c0c4f1153c08b6f8911db6e1b7993cc6131728e6529460e7e7971e2abb831b170179ace501a8d02c07db91fdf2e8eb60d28a383ebafdd3aacf80d55f76ee9bfd3397c39e7c4988ea584f3aeeefa8537da59161939f6dace17db00815c78b5179bd0dcc1b5401'
    //     const crossStateRooty1 = '0x21ad6322ff64eacc0d5bdc672960571b626aaccdf0ea1ad5b880d90670ab9318';
    //     const proofy = [];
    //     const positiony = [];
    //     const merkelValuesy = '0x20bcd86861b3553a750c7f456fdc75feea5a653cbe5afdfc26a9212d79a7a9fb200300000000000000204c91f13efe3bf0130740faffd0178259d7de04a64cef7f07f72f45081b60273708050000000000000014eddceb99f62cf23b9c4ca91942ffbdb8b555db500200000000000000145e43a235a4c63a897372a12f34dbe569759bb4c506756e6c6f636b4a14d874d6b41c7c44c9e5701582e849410946dbd12414a97cd854b11b54b7b8db09e1046e2a0e8eb7f5020100000000000000000000000000000000000000000000000000000000000000';
    //     const blockHeighty1 = new web3.utils.BN('10125');
    //     it('in new EthCrossChainManager contract, should SyncAndVerify correctly', async function () {
    //         const {logs} = await this.ECCM1.SyncAndVerify(blockHeadery1, signaturesy1, proofy, positiony, merkelValuesy, blockHeighty1);
    //         expectEvent.inLogs(logs, 'SyncBlockHeaderEvent', {
    //             height: blockHeighty1,
    //             rawHeader: blockHeadery1,
    //         });
    //         expectEvent.inLogs(logs, 'VerifyAndExecuteTxEvent', {
    //             fromChainID: new web3.utils.BN('3'),
    //             toContract: '0x5e43a235a4c63a897372a12f34dbe569759bb4c5',
    //             crossChainTxHash:'0xbcd86861b3553a750c7f456fdc75feea5a653cbe5afdfc26a9212d79a7a9fb20',
    //             fromChainTxHash:'0x4c91f13efe3bf0130740faffd0178259d7de04a64cef7f07f72f45081b602737',
    //         });
    //     });

    //     it('in new EthCrossChainManager contract, SyncAndVerify throws error on sync same block height header twice', async function () {
    //         await expectRevert(this.ECCM1.SyncAndVerify(blockHeadery1, signaturesy1, proofy, positiony, merkelValuesy, blockHeighty1), "the transaction has been executed!");
    //     });
    // });
    // describe('Here, we try to use new method in the new EthCrossChainManager contract,', async function () {

    //     const blockHeaderz1 = '0x00000000000000000000000043719e50ca252f77012cbeaf9729c8efc1722e284b53a8750e2c21c1680fd1fd27fcc4dd34ae19f8f6238f16e754789dd1e46d83c8a1413a7bd61d8ce35df8d57321c3b0f643ef532da7226dbe7f2cf91e11ebdc18cfdeb6d39acc279b46c52791be5e8f51064895f44ff3197dd26c7ef5beb22b8e863f82d494eaa141ef3dbd30286b5ece270000d30f17a908e93471fd10017b226c6561646572223a372c227672665f76616c7565223a22424d71694449397664416967586564345243795a35547963424b384e71737141614146774c794a59692f76723665693746545754524e6a6a66306c434b4a5546706239486f63534866524765704d5449483564666431513d222c227672665f70726f6f66223a2241522f2f3757705556417a73773138717131572f4d6e434751584468636f737455517265496c46395933516f677a79444e6a4357643335444c6f534b4e564e4377684d6b6e417959426c48677a504b74474e743859413d3d222c226c6173745f636f6e6669675f626c6f636b5f6e756d223a31303030302c226e65775f636861696e5f636f6e666967223a6e756c6c7d0000000000000000000000000000000000000000'
    //     const signaturesz1 = '0x04674219b0b5c0ec405499f4368e7662f859bdf8618031ee3e853ecb58d453897e785385470edf93d0d975891fcbd1c97ff67381ad99bb05a77e3737a9ea346500249464d8418291b73a963e33172f786104204dccbe3420eb4c00fcb245ed9b417467f45b831f9c083b6cc2bd952db444aa7eb833ef6e8241e6720d86d80427b3007c045c9e985e72858b2cda12795de55cd6f237d1de15d4e0b7f0d88d594ad16c5effe5c901771aa6f0a42f71f8ae8755a0fbbad7efb708b2044fe37e65a1fb5d0114960657a92bd8c2a156643341900fc1bf50f7b9c443f1985691257bef4f7a760c9eb93cf745a039d750452b92ceeadff6aecd89c9eb90e062d24de906b874ed01f2d1dfc92f7d1cf56cbfdbd3c8b81d6870a24a7245ff509be974a42328dc0de264e0422d891c96671aaf7a5db8667ad09991ea2ce57de92af020f9a8317bdcdf0126e8921b26c2358be3f596586af2abc659c6ccf269a2ddd57394e92f48ee1a0b430161e19bbc982117a0bef63e4779da7eca44fa3a2729ee47da9297848db81800'
    //     const crossStateRootz1 = '0x7321c3b0f643ef532da7226dbe7f2cf91e11ebdc18cfdeb6d39acc279b46c527';
    //     const proofz = [];
    //     const positionz = [];
    //     const merkelValuesz = '0x20bba089bb685981bb4251bfb3ff159cd1de45e29f9fe0107dcab3351b2164ad1f030000000000000020a03a6dafa4bcd2aea956274d9936219150925ef050751bfa4d4c0b902148934808060000000000000014eddceb99f62cf23b9c4ca91942ffbdb8b555db500200000000000000145e43a235a4c63a897372a12f34dbe569759bb4c506756e6c6f636b4a14d874d6b41c7c44c9e5701582e849410946dbd12414a97cd854b11b54b7b8db09e1046e2a0e8eb7f50200f2052a01000000000000000000000000000000000000000000000000000000';
    //     const blockHeightz1 = new web3.utils.BN('10190');
    //     it('in new EthCrossChainManager contract, should addFunctionTest1 correctly', async function () {
    //         const {logs} = await this.ECCM1.addFunctionTest1(blockHeaderz1, signaturesz1);
    //         expectEvent.inLogs(logs, 'SyncBlockHeaderEvent', {
    //             height: blockHeightz1,
    //             rawHeader: blockHeaderz1,
    //         });
    //         expectEvent.inLogs(logs, 'AddFunctionTest1', {
    //             rawHeader: blockHeaderz1,
    //         });
    //     });
    //     it('in new EthCrossChainManager contract, should addFunctionTest2 correctly', async function () {
    //         const {logs} = await this.ECCM1.addFunctionTest2(proofz, positionz, merkelValuesz, blockHeightz1);
    //         expectEvent.inLogs(logs, 'VerifyAndExecuteTxEvent', {
    //             fromChainID: new web3.utils.BN('3'),
    //             toContract: '0x5e43a235a4c63a897372a12f34dbe569759bb4c5',
    //             crossChainTxHash:'0xbba089bb685981bb4251bfb3ff159cd1de45e29f9fe0107dcab3351b2164ad1f',
    //             fromChainTxHash:'0xa03a6dafa4bcd2aea956274d9936219150925ef050751bfa4d4c0b9021489348',
    //         });
    //         expectEvent.inLogs(logs, 'AddFunctionTest2', {
    //             height: blockHeightz1,
    //             toMerkleValueBs: merkelValuesz,
    //         });
    //     });
    //     it('in new EthCrossChainManager contract, addFunctionTest2 throws error on sync same block height header twice', async function () {
    //         await expectRevert(this.ECCM1.addFunctionTest2(proofz, positionz, merkelValuesz, blockHeightz1), "the transaction has been executed!");
    //     });
    // });
});